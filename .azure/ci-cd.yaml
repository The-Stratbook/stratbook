trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - README.md

pool:
  vmImage: 'ubuntu-latest'

variables:
  location: 'westeurope'
  resourceGroupName: 'rg-thestratbook-prod'
  staticWebAppName: 'swa-thestratbook-prod'
  budgetAmount: 10
  budgetContactEmail: 'thestratbook.com@vanhoutensolutions.nl'
  primaryDomain: 'thestratbook.com'

stages:
- stage: DeployInfrastructure
  displayName: 'Deploy Infrastructure'
  jobs:
  - job: DeployBicep
    displayName: 'Deploy Bicep Template'
    steps:
    - task: AzureCLI@2
      displayName: 'Deploy Azure Resources'
      inputs:
        azureSubscription: 'TheStratBookServiceConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Deploy the Bicep template at subscription scope
          az deployment sub create \
            --name $(Build.BuildNumber) \
            --location $(location) \
            --template-file $(Build.SourcesDirectory)/infrastructure/main.bicep \
            --parameters location=$(location) \
                       resourceGroupName=$(resourceGroupName) \
                       staticWebAppName=$(staticWebAppName) \
                       budgetAmount=$(budgetAmount) \
                       budgetContactEmail=$(budgetContactEmail) \
                       primaryDomain=$(primaryDomain) \
            --output json
          
          # Get the deployment token
          DEPLOYMENT_TOKEN=$(az staticwebapp secrets list \
            --name $(staticWebAppName) \
            --query "properties.apiKey" -o tsv)
          
          # Store the token securely for later stages
          echo "##vso[task.setvariable variable=deploymentToken;isOutput=true;issecret=true]$DEPLOYMENT_TOKEN"
      name: infraDeployment

- stage: BuildAndDeployApp
  displayName: 'Build and Deploy Application'
  dependsOn: DeployInfrastructure
  variables:
    deploymentToken: $[ stageDependencies.DeployInfrastructure.DeployBicep.outputs['infraDeployment.deploymentToken'] ]
  jobs:
  - job: BuildAndDeploy
    displayName: 'Build and Deploy React App'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - script: |
        npm ci
      displayName: 'Install Dependencies'

    - script: |
        npm run build
      displayName: 'Build React App'

    - task: AzureCLI@2
      displayName: 'Deploy to Static Web App'
      inputs:
        azureSubscription: 'TheStratBookServiceConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Deploy the build output to the Static Web App
          az staticwebapp appsettings set \
            --name $(staticWebAppName) \
            --setting-names "WEBSITE_NODE_DEFAULT_VERSION=18.x"
          
          # Use the Azure CLI swa command to deploy
          npx @azure/static-web-apps-cli deploy \
            --app-location . \
            --api-location "" \
            --output-location build \
            --deployment-token $(deploymentToken) \
            --env production

- stage: ValidateDeployment
  displayName: 'Validate Deployment'
  dependsOn: BuildAndDeployApp
  jobs:
  - job: Validate
    displayName: 'Test and Validate Deployment'
    steps:
    - task: AzureCLI@2
      displayName: 'Check Deployment Status'
      inputs:
        azureSubscription: 'TheStratBookServiceConnection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Get the URL of the deployed app
          APP_URL=$(az staticwebapp show \
            --name $(staticWebAppName) \
            --query "defaultHostname" -o tsv)
          
          echo "Application deployed to: https://$APP_URL"
          
          # Basic validation - check if the site responds
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://$APP_URL)
          
          if [ $HTTP_STATUS -eq 200 ]; then
            echo "✅ Deployment validated successfully!"
          else
            echo "❌ Deployment validation failed! Status code: $HTTP_STATUS"
            exit 1
          fi